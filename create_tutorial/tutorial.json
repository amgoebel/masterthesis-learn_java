
{
    "tutorial": [
        {
            "chapter_nr": 1,
            "topic": "output command: System.out.println()",
            "content": "<h1 class=\"western\">Kapitel 1 - Hallo Welt</h1>\n<p>Rechts siehst du ein &quot;Hallo Welt&quot; Programm.</p>\n<p>In vielen Programmiersprachen ist\ndies das erste Programm, das man schreibt. Es macht nichts weiter,\nals dass es die Worte &quot;Hallo Welt&quot; ausgibt.</p>\n<p>Im ersten Kapitel lernst du mit Hilfe\ndieses einfachen Programms einige Regeln für Java kennen. Du wirst\nhier schon auf einige Begriffe stoßen, die am Anfang noch unklar\nsind und die du erst im Laufe dieses Lehrgangs richtig verstehen\nwirst. Mach dir darum keine Sorgen.</p>\n<p>Das Programm besteht aus einer Klasse\nmit dem Namen &quot;main&quot;:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n<code class=\"western\">     </code>...\n}</code></pre>\n<p>Da das Programm nur aus einer Klasse besteht, ist dies die\nHauptklasse. Jede Java Datei hat die Erweiterung <b>.java </b>und\nbesitzt eine Hauptklasse mit dem gleichen Namen wie die Datei. Dieses\nProgramm würde also unter dem Namen <b>Main.java</b> abgespeichert.</p>\n<p>Du wirst noch genauer erfahren, was\nman bei der Programmierung unter einer Klasse versteht.</p>\n<p>Zunächst kannst du dir eine Klasse\nals ein Konzept mit einer Aufgabe vorstellen. Die Aufgabe dieser\nKlasse ist die Ausgabe der Texts &quot;Hallo Welt&quot;.</p>\n<p>Klassennamen schreibt man in der\nRegel groß. Die geschweiften Klammern geben an, was alles zu der\nKlasse hinzu gehört.</p>\n<p>In der Klasse befindet sich eine\n<b>Methode</b> main(), die die Aufgabe des Programms enthält:</p>\n<pre class=\"western\"><code class=\"western\">public static void main(String[] args) {\n<code class=\"western\">     </code>...\n}</code></pre>\n<p>Der Name einer Methode endet immer mit runden Klammern. Später wirst\ndu sehen, dass es auch Methoden gibt, bei denen nichts in der Klammer\nsteht. Trotzdem müssen die runden Klammern immer am Ende des Namens\nvorhanden sein.</p>\n<p>Wie bei der Klasse zeigen die\ngeschweiften Klammern an, was zu der Methode hinzu gehört.</p>\n<p>Die Begriffe <b>public</b>, <b>static</b>,\n<b>void</b> und <b>String[] args</b> werden wir später genauer\nverstehen. Fürs erste reicht es zu verstehen, dass sie (notwendige)\nEigenschaften der Methode beschreiben.</p>\n<p>Der entscheidende Befehl für das\nProgramm ist:</p>\n<pre class=\"western\"><code class=\"western\">System.out.println(&quot;Hallo Welt&quot;);</code></pre><p>\nDieser Befehl weist den Computer an, den Text &quot;Hallo Welt&quot;\nauszugeben.</p>\n<p>Der Befehl ist zusammengesetzt aus\neinzelnen Komponenten (zu erkennen an den Punkten). Du wirst bald\nverstehen, was die einzelnen Teile bedeuten. Fürs Erste kannst du\ndir merken, dass man mit diesem Befehl Text ausgeben kann.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Ändere das Programm so ab, dass es nicht mehr \"Hallo Welt\", sondern \"Hello World\" ausgibt.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hallo Welt!\");\n    }\n}"
        },
        {
            "chapter_nr": 2,
            "topic": "commenting code",
            "content": "<h1 class=\"western\">Kapitel 2 - Kommentare im Code</h1>\n<p>In der Programmierung ist es wichtig, den Code verständlich zu halten. Eine Möglichkeit, dies zu tun, ist die Verwendung von Kommentaren.</p>\n<p>Kommentare sind Texte im Code, die vom Computer ignoriert werden. Sie dienen dazu, den Code zu erklären oder Notizen für dich selbst oder andere Programmierer zu hinterlassen.</p>\n<p>In Java gibt es zwei Arten von Kommentaren:</p>\n<ul>\n    <li><b>Einzeilige Kommentare:</b> Diese beginnen mit zwei Schrägstrichen <code>//</code>. Alles, was nach diesen Zeichen kommt, wird als Kommentar betrachtet.</li>\n    <li><b>Mehrzeilige Kommentare:</b> Diese beginnen mit <code>/*</code> und enden mit <code>*/</code>. Alles dazwischen wird als Kommentar betrachtet, egal wie viele Zeilen es sind.</li>\n</ul>\n<p>Hier ist ein Beispiel für einen einzeiligen Kommentar:</p>\n<pre class=\"western\"><code class=\"western\">// Dies ist ein Kommentar</code></pre>\n<p>Und hier ist ein Beispiel für einen mehrzeiligen Kommentar:</p>\n<pre class=\"western\"><code class=\"western\">/*\nDies ist ein mehrzeiliger Kommentar.\nEr kann über mehrere Zeilen gehen.\n*/</code></pre>\n<p>Kommentare sind sehr nützlich, um den Code zu dokumentieren und um zu erklären, was bestimmte Teile des Codes tun. Es ist eine gute Praxis, Kommentare zu verwenden, um den Code lesbarer zu machen.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Füge deinem Programm Kommentare hinzu, um zu erklären, was jeder Teil des Codes macht. Erstelle sowohl einzeilige als auch mehrzeilige Kommentare.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Dies ist ein einzeiliger Kommentar. Verändere ihn. \n        System.out.println(\"Dies ist der Beginn eines Kurses, der dir Java beibringen soll.\");\n        // TODO: Dies ist ein einzeiliger Kommentar. Verändere ihn in einen mehrzeiligen Kommentar. \n        System.out.println(\"Am Ende des Kurses wirst du die Grundlagen der Programmierung mit Java beherrschen\");\n    }\n}"
        },
        {
            "chapter_nr": 3,
            "topic": "data types: boolean, int, float, double, char, String and declaration and initialization of variables",
            "content": "<h1 class=\"western\">Kapitel 3 - Grundlegende Datentypen und Variablen</h1>\n<p>In der Programmierung ist es wichtig, Daten zu speichern und zu verarbeiten. In Java gibt es verschiedene Arten von Daten, die wir als <b>Datentypen</b> bezeichnen. Die häufigsten Datentypen sind:</p>\n<ul>\n    <li><b>int:</b> Dieser Datentyp wird verwendet, um ganze Zahlen zu speichern, wie z.B. 1, 2 oder -5.</li>\n    <li><b>double:</b> Dieser Datentyp wird verwendet, um Dezimalzahlen zu speichern, wie z.B. 3.14 oder -0.001.</li>\n    <li><b>char:</b> Dieser Datentyp wird verwendet, um ein einzelnes Zeichen zu speichern, wie z.B. 'a' oder 'Z'.</li>\n    <li><b>boolean:</b> Dieser Datentyp wird verwendet, um Wahrheitswerte zu speichern, die entweder <code>true</code> oder <code>false</code> sein können.</li>\n</ul>\n<p>Um eine Variable zu verwenden, musst du sie zuerst <b>deklarieren</b>. Das bedeutet, dass du dem Computer sagst, dass du eine Variable mit einem bestimmten Datentyp erstellen möchtest. Zum Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">int zahl;</code></pre>\n<p>Hier haben wir eine Variable namens <code>zahl</code> deklariert, die eine ganze Zahl speichern kann. Um der Variable einen Wert zuzuweisen, verwenden wir das <b>Gleichheitszeichen</b>:</p>\n<pre class=\"western\"><code class=\"western\">zahl = 5;</code></pre>\n<p>Du kannst auch die Deklaration und die Zuweisung in einem Schritt durchführen:</p>\n<pre class=\"western\"><code class=\"western\">int zahl = 5;</code></pre>\n<p>Jetzt enthält die Variable <code>zahl</code> den Wert 5. Das nennt man <b>Initialisierung</b>.</p>\n<p>In diesem Kapitel hast du gelert, wie man Variablen deklariert und initialisiert, um verschiedene Datentypen zu verwenden.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das die folgenden Variablen deklariert und initialisiert:</p>\n<ul>\n    <li>Eine ganze Zahl (int) mit dem Namen <code>alter</code> und dem Wert 16.</li>\n    <li>Eine Dezimalzahl (double) mit dem Namen <code>gewicht</code> und dem Wert 65.5.</li>\n    <li>Ein Zeichen (char) mit dem Namen <code>anfangsBuchstabe</code> und dem Wert 'J'.</li>\n    <li>Ein Wahrheitswert (boolean) mit dem Namen <code>istStudent</code> und dem Wert <code>true</code>.</li>\n</ul>\n<p>Gib anschließend die Werte der Variablen in der Konsole aus.</p><p>Den Wert einer Variable x kann man z.B. mit dem folgenden Befehl ausgeben:</p>\n<pre class=\"western\"><code class=\"western\">System.out.println(\"Wert von x: \" + x);</code></pre>\n<p></p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Deklariere und initialisiere die Variablen hier\n  \n        // TODO: Gib die Werte der Variablen aus\n    }\n}"
        },
        {
            "chapter_nr": 4,
            "topic": "basic arithmetic operations",
            "content": "<h1 class=\"western\">Kapitel 4 - Grundlegende arithmetische Operationen</h1>\n<p>In der Programmierung ist es oft notwendig, Berechnungen durchzuführen. Java bietet eine Vielzahl von <b>arithmetischen Operationen</b>, die du verwenden kannst, um mit Zahlen zu arbeiten. Die grundlegenden arithmetischen Operationen sind:</p>\n<ul>\n    <li><b>Addition (+):</b> Diese Operation addiert zwei Zahlen. Beispiel: <code>int summe = 5 + 3;</code></li>\n    <li><b>Subtraktion (-):</b> Diese Operation subtrahiert eine Zahl von einer anderen. Beispiel: <code>int differenz = 5 - 3;</code></li>\n    <li><b>Multiplikation (*):</b> Diese Operation multipliziert zwei Zahlen. Beispiel: <code>int produkt = 5 * 3;</code></li>\n    <li><b>Division (/):</b> Diese Operation teilt eine Zahl durch eine andere. Beispiel: <code>int quotient = 6 / 3;</code></li>\n    <li><b>Modulus (%):</b> Diese Operation gibt den Rest einer Division zurück. Beispiel: <code>int rest = 5 % 3;</code></li>\n</ul>\n<p>Hier ist ein einfaches Beispiel, das alle diese Operationen verwendet:</p>\n<pre class=\"western\"><code class=\"western\">int a = 10;\nint b = 3;\nint summe = a + b;\nint differenz = a - b;\nint produkt = a * b;\nint quotient = a / b;\nint rest = a % b;\n</code></pre>\n<p>In diesem Beispiel haben wir zwei Variablen <code>a</code> und <code>b</code> deklariert und initialisiert. Dann haben wir die verschiedenen arithmetischen Operationen auf diese Variablen angewendet und die Ergebnisse in neuen Variablen gespeichert.</p>\n<p>Es ist wichtig zu beachten, dass bei der Division von zwei ganzen Zahlen das Ergebnis ebenfalls eine ganze Zahl ist. Das bedeutet, dass der Rest der Division verworfen wird. Wenn du ein genaues Ergebnis benötigst, solltest du den <code>double</code> Datentyp verwenden.</p>\n<p>In diesem Kapitel wirst du lernen, wie man diese arithmetischen Operationen in deinen Programmen verwendet, um Berechnungen durchzuführen.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das zwei ganze Zahlen deklariert und initialisiert. Führe die grundlegenden arithmetischen Operationen (Addition, Subtraktion, Multiplikation, Division und Modulus) auf diesen Zahlen aus und gib die Ergebnisse in der Konsole aus.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Deklariere und initialisiere zwei ganze Zahlen\n        int zahl1 = 0; // Beispielwert\n        int zahl2 = 0; // Beispielwert\n\n        // TODO: Führe die arithmetischen Operationen aus\n\n        // TODO: Gib die Ergebnisse der Operationen aus\n    }\n}"
        },
        {
            "chapter_nr": 5,
            "topic": "input command: nextLine() via java.util.Scanner",
            "content": "<h1 class=\"western\">\nKapitel 5 - Eingabe</h1>\n<p>Häufig ist es notwendig, dass ein\nProgramm Informationen vom Nutzer während der Laufzeit erhält.</p>\n<p>In Java gibt es dafür eine\nsogenannte Scanner Klasse, die diese Funktionalität bereit stellt.\nDiese muss zu Beginn des Programms importiert werden mit:\n</p>\n<pre class=\"western\"><code class=\"western\">import java.util.Scanner;</code></pre>\n<p>Im Programm kann man dann (wie bekannt) ein Objekt der Klasse Scanner\nerstellen mit:</p>\n<pre class=\"western\"><code class=\"western\">Scanner scanner = new Scanner(System.in);</code></pre>\n<p><i>System.in</i> gibt dabei an, dass der Scanner den <i>standard input stream</i> (meistens die\nKommandozeile) als Quelle verwenden soll. Möglich wären hier auch\neinfach eine String Variable oder eine Datei.</p>\n<p>Jetzt kann man den <i>scanner</i>\ndazu verwenden, um Text vom Nutzer während der Laufzeit zu erhalten.\nMit dem Befehl</p>\n<pre class=\"western\"><code class=\"western\">String text = scanner.nextLine();</code></pre>\n<p>wird eine Zeile von der Quelle (im diesen Fall die Eingabe des\nNutzers) eingelesen und als Wert der Variable text zugeordnet.\n</p>\n<p>Hinweis: Die Eingabe des Nutzers wird\ndurch die <i>Enter </i>Taste auf der Tastatur beendet.\n</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Vervollständige das Programm, so dass es nach einem Username fragt und diesen unter der Variable userName abspeichert.\n        Anschließend soll das Programm den Text \"Der Username ist: userName\" ausgeben, wobei userName durch den Wert der Variable ersetzt wird. </p>\n",
            "java": "import java.util.Scanner;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    todo ...\n  }\n}"
        },
        {
            "chapter_nr": 6,
            "topic": "if-else statements and relational and logical operators",
            "content": "<h1 class=\"western\">Kapitel 6 - if-else-Anweisungen und relationale sowie logische Operatoren</h1>\n<p>In der Programmierung ist es oft notwendig, Entscheidungen zu treffen. Dies geschieht in Java mit <b>if-else-Anweisungen</b>. Mit diesen Anweisungen kannst du überprüfen, ob eine Bedingung wahr oder falsch ist, und entsprechend darauf reagieren.</p>\n<p>Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">int zahl = 10;\nif (zahl > 5) {\n    System.out.println(\"Die Zahl ist größer als 5.\");\n} else {\n    System.out.println(\"Die Zahl ist 5 oder kleiner.\");\n}</code></pre>\n<p>In diesem Beispiel wird überprüft, ob die Variable <code>zahl</code> größer als 5 ist. Wenn dies der Fall ist, wird die erste Nachricht ausgegeben. Andernfalls wird die zweite Nachricht ausgegeben.</p>\n<p>Zusätzlich zu <b>if-else-Anweisungen</b> gibt es auch <b>relationale Operatoren</b>, die verwendet werden, um Vergleiche zwischen Werten anzustellen. Die häufigsten relationalen Operatoren sind:</p>\n<ul>\n    <li><code>==</code> (gleich)</li>\n    <li><code>!=</code> (ungleich)</li>\n    <li><code>&gt;</code> (größer als)</li>\n    <li><code>&lt;</code> (kleiner als)</li>\n    <li><code>&gt;=</code> (größer oder gleich)</li>\n    <li><code>&lt;=</code> (kleiner oder gleich)</li>\n</ul>\n<p>Außerdem gibt es <b>logische Operatoren</b>, die verwendet werden, um mehrere Bedingungen zu kombinieren:</p>\n<ul>\n    <li><code>&&</code> (logisches UND)</li>\n    <li><code>||</code> (logisches ODER)</li>\n    <li><code>!</code> (logische Negation)</li>\n</ul>\n<p>In diesem Kapitel wirst du lernen, wie man <b>if-else-Anweisungen</b> verwendet, um Entscheidungen in deinem Programm zu treffen, und wie man relationale sowie logische Operatoren anwendet.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das eine Zahl von der Benutzereingabe einliest und überprüft, ob die Zahl gerade oder ungerade ist. Gib eine entsprechende Nachricht aus.</p>\n",
            "java": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // TODO: Lese eine Zahl von der Benutzereingabe ein\n        int zahl = 0; // Beispielwert\n\n        // TODO: Überprüfe, ob die Zahl gerade oder ungerade ist\n        if (zahl % 2 == 0) {\n            System.out.println(\"Die Zahl ist gerade.\");\n        } else {\n            System.out.println(\"Die Zahl ist ungerade.\");\n        }\n    }\n}"
        },
        {
            "chapter_nr": 7,
            "topic": "switch-case structure",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 8,
            "topic": "for loop",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 9,
            "topic": "while loop",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 10,
            "topic": "break and continue statements",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 11,
            "topic": "type casts",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 12,
            "topic": "runtime errors",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 13,
            "topic": "writing programs that use control flow to make decisions",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 14,
            "topic": "arrays - declaring, initializing, and accessing array elements",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 15,
            "topic": "using loops to manipulate arrays",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 16,
            "topic": "multidimensional arrays",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 17,
            "topic": "methods in Java (without parameters and return values) - declaration and calling",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 18,
            "topic": "methods with parameters",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 19,
            "topic": "methods and return types",
            "content": "<h1 class=\"western\">Kapitel 19 - Methoden und Rückgabetypen</h1>\n<p>In der Programmierung ist es oft notwendig, dass eine Methode nicht nur eine Aufgabe ausführt, sondern auch ein Ergebnis zurückgibt. Dies geschieht durch die Verwendung von <b>Rückgabetypen</b>.</p>\n<p>Ein Rückgabetyp ist der Datentyp des Wertes, den eine Methode zurückgibt. Wenn eine Methode einen Wert zurückgibt, muss der Rückgabetyp in der Methodendeklaration angegeben werden. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n    public static void main(String[] args) {\n        int ergebnis = addiere(5, 3); // Aufruf der Methode und Speichern des Ergebnisses\n        System.out.println(\"Das Ergebnis ist: \" + ergebnis);\n    }\n\n    public static int addiere(int a, int b) {\n        return a + b; // Rückgabe der Summe\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Methode namens <code>addiere</code> deklariert, die zwei <code>int</code> Werte als Parameter entgegennimmt und deren Summe zurückgibt. Der Rückgabetyp der Methode ist <code>int</code>, was bedeutet, dass sie einen ganzzahligen Wert zurückgibt.</p>\n<p>Durch die Verwendung von Rückgabetypen kannst du Methoden erstellen, die Ergebnisse liefern, die in anderen Teilen deines Programms verwendet werden können. In diesem Kapitel wirst du lernen, wie man Methoden mit Rückgabetypen deklariert und aufruft.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das eine Methode deklariert, die den Quadratwert einer Zahl berechnet und zurückgibt. Rufe diese Methode in der <code>main</code> Methode auf und gib das Ergebnis aus.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Rufe deine Methode auf und gib das Ergebnis aus\n    }\n\n    //TODO: Deklariere und erstelle deine Methode, die den Quadratwert einer Zahl berechnet und zurückgibt.\n}"
        },
        {
            "chapter_nr": 20,
            "topic": "object oriented programming - concept of a class (defining and creating objects - the new keyword)",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 21,
            "topic": "defining methods in a class and calling methods of an object",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 22,
            "topic": "instanzvariablen",
            "content": "<h1 class=\"western\">Kapitel 22 - Instanzvariablen</h1>\n<p>In der objektorientierten Programmierung sind Instanzvariablen Variablen, die zu einem bestimmten Objekt einer Klasse gehören. Jede Instanz (oder jedes Objekt) der Klasse hat ihre eigenen Werte für diese Variablen.</p>\n<p>Instanzvariablen werden in der Regel innerhalb der Klasse deklariert, aber außerhalb von Methoden. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Auto {\n    String farbe; // Instanzvariable\n    int baujahr;  // Instanzvariable\n\n    void fahren() {\n        System.out.println(\"Das Auto fährt.\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir zwei Instanzvariablen <code>farbe</code> und <code>baujahr</code> in der Klasse <code>Auto</code> deklariert. Jedes Auto-Objekt kann eine andere Farbe und ein anderes Baujahr haben.</p>\n<p>Um auf die Instanzvariablen zuzugreifen, verwenden wir das Objekt, das wir erstellt haben. Hier ist ein Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n    public static void main(String[] args) {\n        Auto meinAuto = new Auto();\n        meinAuto.farbe = \"Rot\"; // Zugriff auf die Instanzvariable\n        meinAuto.baujahr = 2020; // Zugriff auf die Instanzvariable\n        System.out.println(\"Mein Auto ist \" + meinAuto.farbe + \" und wurde im Jahr \" + meinAuto.baujahr + \" gebaut.\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir ein Auto-Objekt erstellt und die Instanzvariablen <code>farbe</code> und <code>baujahr</code> gesetzt. Dann haben wir die Werte ausgegeben.</p>\n<p>In diesem Kapitel wirst du lernen, wie man Instanzvariablen verwendet, um den Zustand von Objekten zu speichern und zu verwalten.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse namens <code>Hund</code>, die die Instanzvariablen <code>name</code> (String) und <code>alter</code> (int) hat. Füge eine Methode <code>bellen</code> hinzu, die eine Nachricht ausgibt, die den Namen des Hundes enthält. Erstelle dann ein Objekt der Klasse <code>Hund</code> in der <code>main</code> Methode, setze die Instanzvariablen und rufe die <code>bellen</code> Methode auf.</p>\n",
            "java": "class Hund {\n    String name; // Instanzvariable\n    int alter;   // Instanzvariable\n\n    void bellen() {\n        System.out.println(\"Wuff! Ich heiße \" + name + \", und ich bin \" + alter + \" Jahre alt.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Hund, setze die Instanzvariablen und rufe die bellen Methode auf\n    }\n}"
        },
        {
            "chapter_nr": 23,
            "topic": "constructors",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 24,
            "topic": "inheritance - the extends keyword and class hierarchies",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 25,
            "topic": "method overriding and polymorphism",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 26,
            "topic": "the super keyword",
            "content": "<h1 class=\"western\">Kapitel 26 - Das super Schlüsselwort</h1>\n<p>In der objektorientierten Programmierung ist das <b>super</b> Schlüsselwort ein wichtiges Konzept, das es dir ermöglicht, auf die Eigenschaften und Methoden der übergeordneten Klasse (Elternklasse) zuzugreifen. Dies ist besonders nützlich, wenn du eine Methode oder ein Attribut in der abgeleiteten Klasse überschreibst und dennoch auf die ursprüngliche Implementierung in der Elternklasse zugreifen möchtest.</p>\n<p>Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Tier {\n    void geraeuschMachen() {\n        System.out.println(\"Das Tier macht ein Geräusch.\");\n    }\n}\n\nclass Hund extends Tier {\n    @Override\n    void geraeuschMachen() {\n        super.geraeuschMachen(); // Aufruf der Methode der Elternklasse\n        System.out.println(\"Hund bellt: Wuff, Wuff!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hund meinHund = new Hund();\n        meinHund.geraeuschMachen(); // Gibt beide Nachrichten aus\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir die Methode <code>geraeuschMachen</code> in der Klasse <code>Hund</code> überschrieben. Mit <code>super.geraeuschMachen()</code> rufen wir die Methode der Elternklasse auf, bevor wir die spezifische Nachricht für den Hund ausgeben.</p>\n<p>Das <b>super</b> Schlüsselwort kann auch verwendet werden, um auf Konstruktoren der Elternklasse zuzugreifen. Hier ist ein Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Tier {\n    String name;\n\n    public Tier(String name) {\n        this.name = name;\n    }\n}\n\nclass Hund extends Tier {\n    public Hund(String name) {\n        super(name); // Aufruf des Konstruktors der Elternklasse\n    }\n}\n}</code></pre>\n<p>In diesem Kapitel wirst du lernen, wie man das <b>super</b> Schlüsselwort verwendet, um die Funktionalität deiner Klassen zu erweitern und den Code klarer und wartbarer zu gestalten.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse <code>Fahrzeug</code> mit einem Attribut <code>geschwindigkeit</code> und einer Methode <code>fahren</code>, die die Geschwindigkeit ausgibt. Erstelle dann eine Klasse <code>Auto</code>, die von <code>Fahrzeug</code> erbt und einen Konstruktor hat, der die Geschwindigkeit über das <code>super</code> Schlüsselwort initialisiert. Rufe die Methode <code>fahren</code> in der <code>main</code> Methode auf.</p>\n",
            "java": "class Fahrzeug {\n    int geschwindigkeit;\n\n    public Fahrzeug(int geschwindigkeit) {\n        this.geschwindigkeit = geschwindigkeit;\n    }\n\n    void fahren() {\n        System.out.println(\"Das Fahrzeug fährt mit \" + geschwindigkeit + \" km/h.\");\n    }\n}\n\nclass Auto extends Fahrzeug {\n    public Auto(int geschwindigkeit) {\n        super(geschwindigkeit);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Auto und rufe die fahren Methode auf\n    }\n}"
        }
    ],
    "html_head": "<!DOCTYPE html>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n\t<title>Learn Java - Kapitel 1</title>\n\t<style type=\"text/css\">\n\t\tp { line-height: 100%; margin-bottom: 0.01in; background: transparent; background: transparent; font-family: \"Liberation Serif\"; font-size: 12pt }\n\t\th1 { margin-bottom: 0.08in; background: transparent; background: transparent; page-break-after: avoid }\n\t\th1.western { font-family: \"Liberation Serif\", serif; font-size: 24pt; font-weight: bold }\n\t\th2 { margin-top: 0.14in; margin-bottom: 0.08in; background: transparent; background: transparent; page-break-after: avoid }\n\t\th2.western { font-family: \"Liberation Serif\", serif; font-size: 18pt; font-weight: bold }\n\t\tpre { margin-top: 0.01in; margin-bottom: 0.01in; background: #cccccc; font-size: 12pt; page-break-before: auto; page-break-after: auto }\n\t\tpre.western { margin-top: 0.1in; \"font-family: \"Liberation Mono\", monospace }\n\t\tcode.western { font-family: \"Liberation Mono\", monospace}\n\t\tul, ol { font-family: \"Liberation Serif\"; font-size: 12pt; line-height: 100%; margin-bottom: 0.01in; }\n\t\tli { font-family: \"Liberation Serif\"; font-size: 12pt; line-height: 100%; margin-bottom: 0.01in; }\n\t</style>\n</head>\n<body lang=\"de-DE\">\n",
    "html_tail": "</body>\n</html>\n"
}
