
{
    "tutorial": [
        {
            "chapter_nr": 1,
            "topic": "output command: System.out.println()",
            "content": "<h1 class=\"western\">Kapitel 1 - Hallo Welt</h1>\n<p>Rechts siehst du ein &quot;Hallo Welt&quot; Programm.</p>\n<p>In vielen Programmiersprachen ist\ndies das erste Programm, das man schreibt. Es macht nichts weiter,\nals dass es die Worte &quot;Hallo Welt&quot; ausgibt.</p>\n<p>Im ersten Kapitel lernst du mit Hilfe\ndieses einfachen Programms einige Regeln für Java kennen. Du wirst\nhier schon auf einige Begriffe stoßen, die am Anfang noch unklar\nsind und die du erst im Laufe dieses Lehrgangs richtig verstehen\nwirst. Mach dir darum keine Sorgen.</p>\n<p>Das Programm besteht aus einer Klasse\nmit dem Namen &quot;main&quot;:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n<code class=\"western\">     </code>...\n}</code></pre>\n<p>Da das Programm nur aus einer Klasse besteht, ist dies die\nHauptklasse. Jede Java Datei hat die Erweiterung <b>.java </b>und\nbesitzt eine Hauptklasse mit dem gleichen Namen wie die Datei. Dieses\nProgramm würde also unter dem Namen <b>Main.java</b> abgespeichert.</p>\n<p>Du wirst noch genauer erfahren, was\nman bei der Programmierung unter einer Klasse versteht.</p>\n<p>Zunächst kannst du dir eine Klasse\nals ein Konzept mit einer Aufgabe vorstellen. Die Aufgabe dieser\nKlasse ist die Ausgabe der Texts &quot;Hallo Welt&quot;.</p>\n<p>Klassennamen schreibt man in der\nRegel groß. Die geschweiften Klammern geben an, was alles zu der\nKlasse hinzu gehört.</p>\n<p>In der Klasse befindet sich eine\n<b>Methode</b> main(), die die Aufgabe des Programms enthält:</p>\n<pre class=\"western\"><code class=\"western\">public static void main(String[] args) {\n<code class=\"western\">     </code>...\n}</code></pre>\n<p>Der Name einer Methode endet immer mit runden Klammern. Später wirst\ndu sehen, dass es auch Methoden gibt, bei denen nichts in der Klammer\nsteht. Trotzdem müssen die runden Klammern immer am Ende des Namens\nvorhanden sein.</p>\n<p>Wie bei der Klasse zeigen die\ngeschweiften Klammern an, was zu der Methode hinzu gehört.</p>\n<p>Die Begriffe <b>public</b>, <b>static</b>,\n<b>void</b> und <b>String[] args</b> werden wir später genauer\nverstehen. Fürs erste reicht es zu verstehen, dass sie (notwendige)\nEigenschaften der Methode beschreiben.</p>\n<p>Der entscheidende Befehl für das\nProgramm ist:</p>\n<pre class=\"western\"><code class=\"western\">System.out.println(&quot;Hallo Welt&quot;);</code></pre><p>\nDieser Befehl weist den Computer an, den Text &quot;Hallo Welt&quot;\nauszugeben.</p>\n<p>Der Befehl ist zusammengesetzt aus\neinzelnen Komponenten (zu erkennen an den Punkten). Du wirst bald\nverstehen, was die einzelnen Teile bedeuten. Fürs Erste kannst du\ndir merken, dass man mit diesem Befehl Text ausgeben kann.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Ändere das Programm so ab, dass es nicht mehr \"Hallo Welt\", sondern \"Hello World\" ausgibt.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hallo Welt!\");\n    }\n}"
        },
        {
            "chapter_nr": 2,
            "topic": "commenting code",
            "content": "<h1 class=\"western\">Kapitel 2 - Kommentare im Code</h1>\n<p>In der Programmierung ist es wichtig, den Code verständlich zu halten. Eine Möglichkeit, dies zu tun, ist die Verwendung von Kommentaren.</p>\n<p>Kommentare sind Texte im Code, die vom Computer ignoriert werden. Sie dienen dazu, den Code zu erklären oder Notizen für dich selbst oder andere Programmierer zu hinterlassen.</p>\n<p>In Java gibt es zwei Arten von Kommentaren:</p>\n<ul>\n    <li><b>Einzeilige Kommentare:</b> Diese beginnen mit zwei Schrägstrichen <code>//</code>. Alles, was nach diesen Zeichen kommt, wird als Kommentar betrachtet.</li>\n    <li><b>Mehrzeilige Kommentare:</b> Diese beginnen mit <code>/*</code> und enden mit <code>*/</code>. Alles dazwischen wird als Kommentar betrachtet, egal wie viele Zeilen es sind.</li>\n</ul>\n<p>Hier ist ein Beispiel für einen einzeiligen Kommentar:</p>\n<pre class=\"western\"><code class=\"western\">// Dies ist ein Kommentar</code></pre>\n<p>Und hier ist ein Beispiel für einen mehrzeiligen Kommentar:</p>\n<pre class=\"western\"><code class=\"western\">/*\nDies ist ein mehrzeiliger Kommentar.\nEr kann über mehrere Zeilen gehen.\n*/</code></pre>\n<p>Kommentare sind sehr nützlich, um den Code zu dokumentieren und um zu erklären, was bestimmte Teile des Codes tun. Es ist eine gute Praxis, Kommentare zu verwenden, um den Code lesbarer zu machen.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Füge deinem Programm Kommentare hinzu, um zu erklären, was jeder Teil des Codes macht. Erstelle sowohl einzeilige als auch mehrzeilige Kommentare.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Dies ist ein einzeiliger Kommentar. Verändere ihn. \n        System.out.println(\"Dies ist der Beginn eines Kurses, der dir Java beibringen soll.\");\n        // TODO: Dies ist ein einzeiliger Kommentar. Verändere ihn in einen mehrzeiligen Kommentar. \n        System.out.println(\"Am Ende des Kurses wirst du die Grundlagen der Programmierung mit Java beherrschen\");\n    }\n}"
        },
        {
            "chapter_nr": 3,
            "topic": "data types: boolean, int, float, double, char, String and declaration and initialization of variables",
            "content": "<h1 class=\"western\">Kapitel 3 - Grundlegende Datentypen und Variablen</h1>\n<p>In der Programmierung ist es wichtig, Daten zu speichern und zu verarbeiten. In Java gibt es verschiedene Arten von Daten, die wir als <b>Datentypen</b> bezeichnen. Die häufigsten Datentypen sind:</p>\n<ul>\n    <li><b>int:</b> Dieser Datentyp wird verwendet, um ganze Zahlen zu speichern, wie z.B. 1, 2 oder -5.</li>\n    <li><b>double:</b> Dieser Datentyp wird verwendet, um Dezimalzahlen zu speichern, wie z.B. 3.14 oder -0.001.</li>\n    <li><b>char:</b> Dieser Datentyp wird verwendet, um ein einzelnes Zeichen zu speichern, wie z.B. 'a' oder 'Z'.</li>\n    <li><b>boolean:</b> Dieser Datentyp wird verwendet, um Wahrheitswerte zu speichern, die entweder <code>true</code> oder <code>false</code> sein können.</li>\n</ul>\n<p>Um eine Variable zu verwenden, musst du sie zuerst <b>deklarieren</b>. Das bedeutet, dass du dem Computer sagst, dass du eine Variable mit einem bestimmten Datentyp erstellen möchtest. Zum Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">int zahl;</code></pre>\n<p>Hier haben wir eine Variable namens <code>zahl</code> deklariert, die eine ganze Zahl speichern kann. Um der Variable einen Wert zuzuweisen, verwenden wir das <b>Gleichheitszeichen</b>:</p>\n<pre class=\"western\"><code class=\"western\">zahl = 5;</code></pre>\n<p>Du kannst auch die Deklaration und die Zuweisung in einem Schritt durchführen:</p>\n<pre class=\"western\"><code class=\"western\">int zahl = 5;</code></pre>\n<p>Jetzt enthält die Variable <code>zahl</code> den Wert 5. Das nennt man <b>Initialisierung</b>.</p>\n<p>In diesem Kapitel hast du gelert, wie man Variablen deklariert und initialisiert, um verschiedene Datentypen zu verwenden.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das die folgenden Variablen deklariert und initialisiert:</p>\n<ul>\n    <li>Eine ganze Zahl (int) mit dem Namen <code>alter</code> und dem Wert 16.</li>\n    <li>Eine Dezimalzahl (double) mit dem Namen <code>gewicht</code> und dem Wert 65.5.</li>\n    <li>Ein Zeichen (char) mit dem Namen <code>anfangsBuchstabe</code> und dem Wert 'J'.</li>\n    <li>Ein Wahrheitswert (boolean) mit dem Namen <code>istStudent</code> und dem Wert <code>true</code>.</li>\n</ul>\n<p>Gib anschließend die Werte der Variablen in der Konsole aus.</p><p>Den Wert einer Variable x kann man z.B. mit dem folgenden Befehl ausgeben:</p>\n<pre class=\"western\"><code class=\"western\">System.out.println(\"Wert von x: \" + x);</code></pre>\n<p></p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Deklariere und initialisiere die Variablen hier\n  \n        // TODO: Gib die Werte der Variablen aus\n    }\n}"
        },
        {
            "chapter_nr": 4,
            "topic": "basic arithmetic operations",
            "content": "<h1 class=\"western\">Kapitel 4 - Grundlegende arithmetische Operationen</h1>\n<p>In der Programmierung ist es oft notwendig, mit Zahlen zu rechnen. Java bietet verschiedene arithmetische Operationen, die du verwenden kannst, um Berechnungen durchzuführen.</p>\n<p>Die grundlegenden arithmetischen Operationen sind:</p>\n<ul>\n    <li><b>Addition (+):</b> Diese Operation wird verwendet, um zwei Zahlen zu addieren.</li>\n    <li><b>Subtraktion (-):</b> Diese Operation wird verwendet, um eine Zahl von einer anderen zu subtrahieren.</li>\n    <li><b>Multiplikation (*):</b> Diese Operation wird verwendet, um zwei Zahlen zu multiplizieren.</li>\n    <li><b>Division (/):</b> Diese Operation wird verwendet, um eine Zahl durch eine andere zu dividieren.</li>\n</ul>\n<p>Hier ist ein einfaches Beispiel, das zeigt, wie man diese Operationen in Java verwenden kann:</p>\n<pre class=\"western\"><code class=\"western\">int a = 10;\nint b = 5;\nint summe = a + b; // Addition\nint differenz = a - b; // Subtraktion\nint produkt = a * b; // Multiplikation\nint quotient = a / b; // Division</code></pre>\n<p>In diesem Beispiel haben wir zwei Variablen <code>a</code> und <code>b</code> deklariert und ihnen Werte zugewiesen. Dann haben wir die vier grundlegenden arithmetischen Operationen durchgeführt und die Ergebnisse in neuen Variablen gespeichert.</p>\n<p>Du wirst lernen, wie man diese Operationen in deinen Programmen anwendet, um verschiedene Berechnungen durchzuführen.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das zwei Zahlen deklariert und die Ergebnisse der vier grundlegenden arithmetischen Operationen (Addition, Subtraktion, Multiplikation und Division) ausgibt.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Deklariere und initialisiere zwei integer Variablen mit den Namen zahl1 und zahl2\n        // TODO: Führe die vier grundlegenden arithmetischen Operationen durch \n        // und speichere sie in den Variablen summe, differenz, produkt und quotient\n       int summe = \n       int differenz = \n       int produkt = \n       int quotient = \n       // TODO: Gib die Ergebnisse der Operationen aus\n    }\n}"
        },
        {
            "chapter_nr": 5,
            "topic": "input command: nextLine() via java.util.Scanner",
            "content": "<h1 class=\"western\">\nKapitel 5 - Eingabe</h1>\n<p>Häufig ist es notwendig, dass ein\nProgramm Informationen vom Nutzer während der Laufzeit erhält.</p>\n<p>In Java gibt es dafür eine\nsogenannte Scanner Klasse, die diese Funktionalität bereit stellt.\nDiese muss zu Beginn des Programms importiert werden mit:\n</p>\n<pre class=\"western\"><code class=\"western\">import java.util.Scanner;</code></pre>\n<p>Im Programm kann man dann (wie bekannt) ein Objekt der Klasse Scanner\nerstellen mit:</p>\n<pre class=\"western\"><code class=\"western\">Scanner scanner = new Scanner(System.in);</code></pre>\n<p><i>System.in</i> gibt dabei an, dass der Scanner den <i>standard input stream</i> (meistens die\nKommandozeile) als Quelle verwenden soll. Möglich wären hier auch\neinfach eine String Variable oder eine Datei.</p>\n<p>Jetzt kann man den <i>scanner</i>\ndazu verwenden, um Text vom Nutzer während der Laufzeit zu erhalten.\nMit dem Befehl</p>\n<pre class=\"western\"><code class=\"western\">String text = scanner.nextLine();</code></pre>\n<p>wird eine Zeile von der Quelle (im diesen Fall die Eingabe des\nNutzers) eingelesen und als Wert der Variable text zugeordnet.\n</p>\n<p>Hinweis: Die Eingabe des Nutzers wird\ndurch die <i>Enter </i>Taste auf der Tastatur beendet.\n</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Vervollständige das Programm, so dass es nach einem Username fragt und diesen unter der Variable userName abspeichert.\n        Anschließend soll das Programm den Text \"Der Username ist: userName\" ausgeben, wobei userName durch den Wert der Variable ersetzt wird. </p>\n",
            "java": "import java.util.Scanner;\n\nclass Main {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    todo ...\n  }\n}"
        },
        {
            "chapter_nr": 6,
            "topic": "if-else statements and relational and logical operators",
            "content": "<h1 class=\"western\">Kapitel 6 - Bedingte Anweisungen und Operatoren</h1>\n<p>In der Programmierung ist es oft notwendig, Entscheidungen zu treffen. Dies geschieht durch die Verwendung von <b>if-else</b> Anweisungen.</p>\n<p>Eine <b>if</b> Anweisung überprüft, ob eine bestimmte Bedingung wahr ist. Wenn dies der Fall ist, wird der Code innerhalb der <b>if</b> Anweisung ausgeführt. Andernfalls kann ein alternativer Code innerhalb einer <b>else</b> Anweisung ausgeführt werden.</p>\n<p>Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">int zahl = 10;\nif (zahl > 5) {\n    System.out.println(\"Die Zahl ist größer als 5.\");\n} else {\n    System.out.println(\"Die Zahl ist 5 oder kleiner.\");\n}</code></pre>\n<p>In diesem Beispiel wird überprüft, ob die Variable <code>zahl</code> größer als 5 ist. Wenn dies der Fall ist, wird die erste Nachricht ausgegeben. Andernfalls wird die zweite Nachricht ausgegeben.</p>\n<p>Zusätzlich zu <b>if-else</b> Anweisungen gibt es auch <b>relationale</b> und <b>logische</b> Operatoren, die dir helfen, Bedingungen zu formulieren:</p>\n<ul>\n    <li><b>Relationale Operatoren:</b> Diese werden verwendet, um zwei Werte zu vergleichen. Beispiele sind <code>==</code> (gleich), <code>!=</code> (ungleich), <code>&gt;</code> (größer als), <code>&lt;</code> (kleiner als).</li>\n    <li><b>Logische Operatoren:</b> Diese werden verwendet, um mehrere Bedingungen zu kombinieren. Beispiele sind <code>&&</code> (und), <code>||</code> (oder).</li>\n</ul>\n<p>Du wirst lernen, wie man diese Anweisungen und Operatoren in deinen Programmen anwendet, um Entscheidungen zu treffen.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das eine Zahl vom Benutzer einliest und überprüft, ob die Zahl gerade oder ungerade ist. Gib eine entsprechende Nachricht aus.</p>\n",
            "java": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // TODO: Lese eine Zahl vom Benutzer ein\n        // TODO: Überprüfe, ob die Zahl gerade oder ungerade ist\n        // TODO: Gib die entsprechende Nachricht aus\n    }\n}"
        },
        {
            "chapter_nr": 7,
            "topic": "switch-case structure",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 8,
            "topic": "for loop",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 9,
            "topic": "while loop",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 10,
            "topic": "break and continue statements",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 11,
            "topic": "type casts",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 12,
            "topic": "runtime errors",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 13,
            "topic": "writing programs that use control flow to make decisions",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 14,
            "topic": "arrays - declaring, initializing, and accessing array elements",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 15,
            "topic": "using loops to manipulate arrays",
            "content": "<h1 class=\"western\">Kapitel 15 - Schleifen zur Manipulation von Arrays</h1>\n<p>In diesem Kapitel werden wir lernen, wie man Schleifen verwendet, um mit Arrays zu arbeiten. Arrays sind eine Möglichkeit, mehrere Werte des gleichen Datentyps zu speichern, und Schleifen ermöglichen es uns, diese Werte effizient zu verarbeiten.</p>\n<p>Wir werden die <b>for-Schleife</b> und die <b>while-Schleife</b> verwenden, um durch die Elemente eines Arrays zu iterieren. Außerdem werden wir lernen, wie man die Werte in einem Array ändern kann.</p>\n<p>Hier ist ein einfaches Beispiel, das zeigt, wie man mit einer for-Schleife durch ein Array iteriert:</p>\n<pre class=\"western\"><code class=\"western\">int[] zahlen = {1, 2, 3, 4, 5};\n\nfor (int i = 0; i &lt; zahlen.length; i++) {\n    System.out.println(zahlen[i]);\n}</code></pre>\n<p>In diesem Beispiel haben wir ein Array mit den Werten 1 bis 5 deklariert und mit einer for-Schleife durch das Array iteriert, um jeden Wert auszugeben.</p>\n<p>Wir können auch die Werte in einem Array ändern. Hier ist ein Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">zahlen[0] = 10; // Ändert den ersten Wert im Array auf 10</code></pre>\n<p>In diesem Kapitel wirst du lernen, wie man Schleifen verwendet, um Arrays zu manipulieren und die Werte in ihnen zu ändern.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das ein Array von 5 ganzen Zahlen deklariert, diese mit Werten initialisiert und dann die Werte verdoppelt. Gib die ursprünglichen und die verdoppelten Werte in der Konsole aus. Verwende eine for-Schleife zur Verdoppelung und Ausgabe der Werte des Arrays.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Deklariere und initialisiere ein Array von 5 ganzen Zahlen\n        // TODO: Verwende eine Schleife, um die Werte im Array zu verdoppeln und die ursprünlichen und verdoppelten Werte auszugeben.\n    }\n}"
        },
        {
            "chapter_nr": 16,
            "topic": "multidimensional arrays",
            "content": "",
            "assignment": "",
            "java": ""
        },
        {
            "chapter_nr": 17,
            "topic": "methods in Java (without parameters and return values) - declaration and calling",
            "content": "<h1 class=\"western\">Kapitel 17 - Methoden in Java (ohne Parameter und Rückgabewerte)</h1>\n<p>In der Programmierung ist es wichtig, Code in wiederverwendbare Teile zu organisieren. Eine Möglichkeit, dies zu tun, ist die Verwendung von <b>Methoden</b>.</p>\n<p>Eine Methode ist ein Block von Code, der eine bestimmte Aufgabe ausführt. Du kannst eine Methode deklarieren und sie dann in deinem Programm aufrufen, um die darin enthaltenen Anweisungen auszuführen.</p>\n<p>Hier ist ein einfaches Beispiel für die Deklaration und den Aufruf einer Methode:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n    public static void main(String[] args) {\n        meineMethode(); // Aufruf der Methode\n    }\n\n    public static void meineMethode() {\n        System.out.println(\"Hallo von meiner Methode!\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Methode namens <code>meineMethode</code> deklariert, die eine Nachricht ausgibt. Wir rufen diese Methode in der <code>main</code> Methode auf, um die Nachricht anzuzeigen.</p>\n<p>Methoden helfen, den Code zu strukturieren und wiederverwendbar zu machen. Du wirst lernen, wie man Methoden in deinen Programmen verwendet, um die Lesbarkeit und Wartbarkeit zu verbessern.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das eine Methode deklariert, die eine einfache Nachricht ausgibt. Rufe diese Methode in der <code>main</code> Methode drei mal auf.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Rufe deine Methode drei mal auf\n    }\n\n    //TODO: Deklariere und erstelle deine Methode, die einen einfachen Text ausgibt.\n}"
        },
        {
            "chapter_nr": 18,
            "topic": "methods with parameters",
            "content": "<h1 class=\"western\">Kapitel 18 - Methoden mit Parametern</h1>\n<p>In der Programmierung ist es oft notwendig, Informationen an Methoden zu übergeben, damit sie ihre Aufgaben ausführen können. Dies geschieht durch die Verwendung von <b>Parametern</b>.</p>\n<p>Ein Parameter ist eine Variable, die in der Methodendeklaration definiert wird und die Werte erhält, die beim Aufruf der Methode übergeben werden. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n    public static void main(String[] args) {\n        begruessung(\"Max\"); // Aufruf der Methode mit dem Parameter \"Max\"\n    }\n\n    public static void begruessung(String name) {\n        System.out.println(\"Hallo, \" + name + \"!\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Methode namens <code>begruessung</code> deklariert, die einen Parameter <code>name</code> vom Typ <code>String</code> erwartet. Wenn wir die Methode aufrufen und den Namen \"Max\" übergeben, wird die Ausgabe \"Hallo, Max!\" sein.</p>\n<p>Durch die Verwendung von Parametern kannst du Methoden flexibler gestalten und sie für verschiedene Eingaben verwenden. In diesem Kapitel wirst du lernen, wie man Methoden mit Parametern deklariert und aufruft.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das eine Methode deklariert, die zwei Zahlen als Parameter entgegennimmt und deren Summe ausgibt. Rufe diese Methode in der <code>main</code> Methode mit verschiedenen Zahlen auf.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Rufe deine Methode mit verschiedenen Zahlen auf\n    }\n\n    //TODO: Deklariere und erstelle deine Methode, die zwei Zahlen als Parameter entgegennimmt und deren Summe ausgibt.\n}"
        },
        {
            "chapter_nr": 19,
            "topic": "methods and return types",
            "content": "<h1 class=\"western\">Kapitel 19 - Methoden und Rückgabetypen</h1>\n<p>In der Programmierung ist es oft notwendig, dass eine Methode nicht nur eine Aufgabe ausführt, sondern auch ein Ergebnis zurückgibt. Dies geschieht durch die Verwendung von <b>Rückgabetypen</b>.</p>\n<p>Ein Rückgabetyp ist der Datentyp des Wertes, den eine Methode zurückgibt. Wenn eine Methode einen Wert zurückgibt, muss der Rückgabetyp in der Methodendeklaration angegeben werden. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n    public static void main(String[] args) {\n        int ergebnis = addiere(5, 3); // Aufruf der Methode und Speichern des Ergebnisses\n        System.out.println(\"Das Ergebnis ist: \" + ergebnis);\n    }\n\n    public static int addiere(int a, int b) {\n        return a + b; // Rückgabe der Summe\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Methode namens <code>addiere</code> deklariert, die zwei <code>int</code> Werte als Parameter entgegennimmt und deren Summe zurückgibt. Der Rückgabetyp der Methode ist <code>int</code>, was bedeutet, dass sie einen ganzzahligen Wert zurückgibt.</p>\n<p>Durch die Verwendung von Rückgabetypen kannst du Methoden erstellen, die Ergebnisse liefern, die in anderen Teilen deines Programms verwendet werden können. In diesem Kapitel wirst du lernen, wie man Methoden mit Rückgabetypen deklariert und aufruft.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle ein Programm, das eine Methode deklariert, die den Quadratwert einer Zahl berechnet und zurückgibt. Rufe diese Methode in der <code>main</code> Methode auf und gib das Ergebnis aus.</p>\n",
            "java": "public class Main {\n    public static void main(String[] args) {\n        // TODO: Rufe deine Methode auf und gib das Ergebnis aus\n    }\n\n    //TODO: Deklariere und erstelle deine Methode, die den Quadratwert einer Zahl berechnet und zurückgibt.\n}"
        },
        {
            "chapter_nr": 20,
            "topic": "object oriented programming - concept of a class (defining and creating objects - the new keyword)",
            "content": "<h1 class=\"western\">Kapitel 20 - Objektorientierte Programmierung: Das Konzept einer Klasse</h1>\n<p>In der objektorientierten Programmierung (OOP) ist eine <b>Klasse</b> ein grundlegendes Konzept, das es ermöglicht, Objekte zu definieren und zu erstellen. Eine Klasse ist wie eine Blaupause oder ein Bauplan für ein Objekt. Sie beschreibt, welche Eigenschaften (Attribute) und Verhaltensweisen (Methoden) die Objekte dieser Klasse haben.</p>\n<p>Um eine Klasse zu definieren, verwendest du das Schlüsselwort <b>class</b>, gefolgt vom Namen der Klasse. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Auto {\n    String farbe;\n    int baujahr;\n\n    void fahren() {\n        System.out.println(\"Das Auto fährt.\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Klasse namens <code>Auto</code> definiert. Diese Klasse hat zwei Attribute: <code>farbe</code> und <code>baujahr</code>. Außerdem hat sie eine Methode namens <code>fahren</code>, die eine Nachricht ausgibt.</p>\n<p>Um ein Objekt dieser Klasse zu erstellen, verwendest du das Schlüsselwort <b>new</b>. Hier ist ein Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">Auto meinAuto = new Auto();</code></pre>\n<p>In diesem Beispiel haben wir ein Objekt namens <code>meinAuto</code> erstellt, das eine Instanz der Klasse <code>Auto</code> ist. Jetzt können wir die Attribute und Methoden dieses Objekts verwenden.</p>\n<p>In diesem Kapitel wirst du lernen, wie man Klassen definiert, Objekte erstellt und die grundlegenden Konzepte der objektorientierten Programmierung anwendet.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse namens <code>Person</code>, die die Attribute <code>name</code> (String) und <code>alter</code> (int) hat. Füge eine Methode <code>vorstellen</code> hinzu, die eine Vorstellung der Person ausgibt. Erstelle dann ein Objekt der Klasse <code>Person</code> in der <code>main</code> Methode und rufe die <code>vorstellen</code> Methode auf.</p>\n</p>",
            "java": "class Person {\n    String name;\n    int alter;\n\n    void vorstellen() {\n        System.out.println(\"Hallo, ich heiße \" + name + \" und ich bin \" + alter + \" Jahre alt.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Person und rufe die vorstellen Methode auf\n    }\n}"
        },
        {
            "chapter_nr": 21,
            "topic": "defining methods in a class and calling methods of an object",
            "content": "<h1 class=\"western\">Kapitel 21 - Methoden in einer Klasse definieren und Methoden eines Objekts aufrufen</h1>\n<p>In diesem Kapitel werden wir lernen, wie man Methoden innerhalb einer Klasse definiert und wie man diese Methoden von einem Objekt der Klasse aufruft.</p>\n<p>Eine Methode ist ein Block von Code, der eine bestimmte Aufgabe ausführt. Wenn du eine Methode in einer Klasse definierst, kannst du sie aufrufen, um die darin enthaltenen Anweisungen auszuführen.</p>\n<p>Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Auto {\n    String farbe;\n\n    void fahren() {\n        System.out.println(\"Das Auto fährt.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Auto meinAuto = new Auto();\n        meinAuto.fahren(); // Aufruf der Methode fahren()\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Methode namens <code>fahren</code> in der Klasse <code>Auto</code> definiert. Wir erstellen ein Objekt <code>meinAuto</code> und rufen die Methode <code>fahren</code> auf, um die Nachricht anzuzeigen.</p>\n<p>Du wirst lernen, wie man Methoden in deinen Klassen definiert und wie man sie von Objekten aufruft, um die Funktionalität deiner Programme zu erweitern.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse namens <code>Rechner</code>, die eine Methode <code>addiere</code> hat, die zwei Zahlen als Parameter entgegennimmt und deren Summe zurückgibt. Erstelle dann ein Objekt der Klasse <code>Rechner</code> in der <code>main</code> Methode und rufe die <code>addiere</code> Methode auf, um die Summe von zwei Zahlen zu berechnen und auszugeben.</p>\n",
            "java": "class Rechner {\n    // TODO: Definiere die Methode addiere, die zwei Zahlen addiert und zurückgibt\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Rechner und rufe die addiere Methode auf\n    }\n}"
        },
        {
            "chapter_nr": 22,
            "topic": "instance variables",
            "content": "<h1 class=\"western\">Kapitel 22 - Instanzvariablen</h1>\n<p>In der objektorientierten Programmierung sind Instanzvariablen Variablen, die zu einem bestimmten Objekt einer Klasse gehören. Jede Instanz (oder jedes Objekt) der Klasse hat ihre eigenen Werte für diese Variablen.</p>\n<p>Instanzvariablen werden in der Regel innerhalb der Klasse deklariert, aber außerhalb von Methoden. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Auto {\n    String farbe; // Instanzvariable\n    int baujahr;  // Instanzvariable\n\n    void fahren() {\n        System.out.println(\"Das Auto fährt.\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir zwei Instanzvariablen <code>farbe</code> und <code>baujahr</code> in der Klasse <code>Auto</code> deklariert. Jedes Auto-Objekt kann eine andere Farbe und ein anderes Baujahr haben.</p>\n<p>Um auf die Instanzvariablen zuzugreifen, verwenden wir das Objekt, das wir erstellt haben. Hier ist ein Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">public class Main {\n    public static void main(String[] args) {\n        Auto meinAuto = new Auto();\n        meinAuto.farbe = \"Rot\"; // Zugriff auf die Instanzvariable\n        meinAuto.baujahr = 2020; // Zugriff auf die Instanzvariable\n        System.out.println(\"Mein Auto ist \" + meinAuto.farbe + \" und wurde im Jahr \" + meinAuto.baujahr + \" gebaut.\");\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir ein Auto-Objekt erstellt und die Instanzvariablen <code>farbe</code> und <code>baujahr</code> gesetzt. Dann haben wir die Werte ausgegeben.</p>\n<p>In diesem Kapitel wirst du lernen, wie man Instanzvariablen verwendet, um den Zustand von Objekten zu speichern und zu verwalten.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse namens <code>Hund</code>, die die Instanzvariablen <code>name</code> (String) und <code>alter</code> (int) hat. Füge eine Methode <code>bellen</code> hinzu, die eine Nachricht ausgibt, die den Namen des Hundes enthält. Erstelle dann ein Objekt der Klasse <code>Hund</code> in der <code>main</code> Methode, setze die Instanzvariablen und rufe die <code>bellen</code> Methode auf.</p>\n",
            "java": "class Hund {\n    String name; // Instanzvariable\n    int alter;   // Instanzvariable\n\n    void bellen() {\n        System.out.println(\"Wuff! Ich heiße \" + name + \", und ich bin \" + alter + \" Jahre alt.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Hund, setze die Instanzvariablen und rufe die bellen Methode auf\n    }\n}"
        },
        {
            "chapter_nr": 23,
            "topic": "constructors",
            "content": "<h1 class=\"western\">Kapitel 23 - Konstruktoren</h1>\n<p>In der objektorientierten Programmierung ist ein <b>Konstruktor</b> eine spezielle Methode, die aufgerufen wird, wenn ein neues Objekt einer Klasse erstellt wird. Der Konstruktor hat den gleichen Namen wie die Klasse und hat keinen Rückgabetyp.</p>\n<p>Der Hauptzweck eines Konstruktors ist es, die Instanzvariablen eines Objekts zu initialisieren. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Auto {\n    String farbe;\n    int baujahr;\n\n    // Konstruktor\n    public Auto(String farbe, int baujahr) {\n        this.farbe = farbe;\n        this.baujahr = baujahr;\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir einen Konstruktor für die Klasse <code>Auto</code> definiert, der zwei Parameter <code>farbe</code> und <code>baujahr</code> entgegennimmt. Mit dem Schlüsselwort <code>this</code> können wir auf die Instanzvariablen der Klasse zugreifen und sie mit den Werten der Parameter initialisieren.</p>\n<p>Wenn wir ein neues Auto-Objekt erstellen, können wir den Konstruktor verwenden, um die Werte für die Instanzvariablen festzulegen:</p>\n<pre class=\"western\"><code class=\"western\">Auto meinAuto = new Auto(\"Rot\", 2020);</code></pre>\n<p>In diesem Kapitel wirst du lernen, wie man Konstruktoren verwendet, um Objekte zu initialisieren und den Code übersichtlicher zu gestalten.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse namens <code>Person</code>, die die Instanzvariablen <code>name</code> (String) und <code>alter</code> (int) hat. Füge einen Konstruktor hinzu, der diese Variablen initialisiert. Erstelle dann ein Objekt der Klasse <code>Person</code> in der <code>main</code> Methode und gib die Werte der Instanzvariablen aus.</p>\n",
            "java": "class Person {\n    String name; // Instanzvariable\n    int alter;   // Instanzvariable\n\n    // Konstruktor\n    public Person(String name, int alter) {\n        this.name = name;\n        this.alter = alter;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Person und gib die Werte der Instanzvariablen aus\n    }\n}"
        },
        {
            "chapter_nr": 24,
            "topic": "inheritance - the extends keyword and class hierarchies",
            "content": "<h1 class=\"western\">\nKapitel 24 - Vererbung</h1>\n<p>Wir haben schon festgestellt, dass\nein wichtiges Konzept der OOP die Wiederverwendbarkeit von Code\nist.<br/>\nHäufig kommt es vor, dass man zwei verschiedene Klassen\nbenötigt, die sich nur in kleinen Teilen unterscheiden.\n</p>\n<p>Damit sich Code nicht in zwei (oder\nmehr) Klassen wiederholt, erstellt man eine Basis-Klasse, die alle\ngemeinsamen Elemente enthält. Die benötigten Klassen sind dann\nKopien dieser Basis-Klasse, erweitert um die jeweiligen\n(unterschiedlichen) Eigenschaften.</p>\n<p>Die Basis-Klasse nennt man die\n<b>Elter-Klasse</b> und die abgeleiteten Klassen heißen\n<b>Kind-Klassen</b>. Die Eigenschaften der Elter-Klasse werden auf\ndie Kind-Klassen <b>vererbt</b>.</p>\n<p>Um anzuzeigen, dass eine Klasse von\neiner anderen Klasse erbt, verwendet man das Keywort <b>extends</b>.</p>\n<p>Im folgenden Beispiel sind die\nKlassen <i>Auto</i> und <i>Motorrad</i> Kind-Klassen von der Klasse <i>Fahrzeug</i>:\n</p>\n<pre class=\"western\">class Fahrzeug {\n<code class=\"western\">   </code>public String art = &quot;Kraftfahrzeug&quot;;  // Attribut von Fahrzeug\n<code class=\"western\">   </code>public void hupen() {                 // Methode von Fahrzeug\n<code class=\"western\">     </code>System.out.println(&quot;Tuut, tuut!&quot;);\n<code class=\"western\">   </code>}\n}\n\n\nclass Auto extends Fahrzeug {\n<code class=\"western\">   </code>public int anzahlRaeder = 4;     // Attribut von Auto\n}\n\nclass Motorrad extends Fahrzeug {\n<code class=\"western\">   </code>public int anzahlRaeder = 2;     // Attribut von Motorrad\n}\n\nclass main{\n<code class=\"western\">   </code>public static void main(String[] args) {\n<code class=\"western\">     </code>// Deklaration von einem Auto und einem Motorrad\n<code class=\"western\">     </code>Auto meinAuto = new Auto();\n<code class=\"western\">     </code>Motorrad meinRad = new Motorrad();\n\n<code class=\"western\">     </code>// Aufrufen der hupen() Methode (von der Fahrzeug Klasse)\n<code class=\"western\">     </code>meinAuto.hupen();\n<code class=\"western\">     </code>meinRad.hupen();\n\n<code class=\"western\">     </code>// Anzeigen der Attribute Art und der Anzahl Räder\n<code class=\"western\">     </code>System.out.print(&quot;Art: &quot; + meinAuto.art);\n<code class=\"western\">     </code>System.out.println(&quot;, Anzahl Räder: &quot; + meinAuto.anzahlRaeder);\n<code class=\"western\">     </code>System.out.print(&quot;Art: &quot; + meinRad.art);\n<code class=\"western\">     </code>System.out.println(&quot;, Anzahl Räder: &quot; + meinRad.anzahlRaeder);\n<code class=\"western\">   </code>}\n}\n</pre>\n<p>Die Ausführung dieses Programms ergibt folgenden Output:</p>\n<pre class=\"western\">Tuut, tuut!\nTuut, tuut!\nArt: Kraftfahrzeug, Anzahl Räder: 4\nArt: Kraftfahrzeug, Anzahl Räder: 2</pre>\n<p>Die Klassen <i>Auto</i> und <i>Motorrad</i> besitzen\nbeide auch das Attribut <i>art</i> und die Methode <i>hupen().</i></p>\n<p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n    <p>Erstelle ein Programm, das die Vererbung zwischen verschiedenen Tierarten demonstriert und dabei die\n\t\tBesonderheiten der Tiere hervorhebt. Du kannst das Programm erweitern, um\n\t\tauch andere Tiere wie Vögel oder Fische einzubeziehen.</p>\n\t<p>Erstelle eine Basis-Klasse Tier, die allgemeine Eigenschaften und Methoden für Tiere definiert.</p>\n\t<p>Erstelle dann zwei spezialisierte Klassen, Hund und Katze, die von der Klasse Tier erben.</p>\n\t<p>Die Klassen sollen folgende Anforderungen erfüllen:</p>\n\t<p>Basis-Klasse Tier:</p>\n\t<ul>\n\t\t<li>Attribut: name (String) - Der Name des Tieres.</li>\n\t\t<li>Attribut: gewicht (double) - Das Gewicht des Tieres.</li>\n\t</ul>\n\t<p>Klasse Hund:</p>\n\t<ul>\n\t\t<li>Erbt von der Klasse Tier.</li>\n\t\t<li>Methode: geraeuschMachen() - Gibt &quot;Hund bellt: Wuff, Wuff!&quot; aus.</li>\n\t\t<li>Methode: apportieren() - Gibt &quot;Hund apportiert den Ball!&quot; aus.</li>\n\t</ul>\n\t<p>Klasse Katze:</p>\n\t<ul>\n\t\t<li>Erbt von der Klasse Tier.</li>\n\t\t<li>Methode: geraeuschMachen() - Gibt &quot;Katze miaut: Miau, Miau!&quot; aus.</li>\n\t\t<li>Methode: kratzen() - Gibt &quot;Katze kratzt das Sofa!&quot; aus.</li>\n\t</ul>\n\t<p>main-Klasse:</p>\n\t<ul>\n\t\t<li>Erstelle in der main-Methode ein Objekt von der Klasse Hund und eines von der Klasse Katze.</li>\n\t\t<li>Rufe die Methode geraeuschMachen() für beide Objekte auf.</li>\n\t\t<li>Rufe die Methoden apportieren() und kratzen() für die entsprechenden Objekte auf.</li>\n\t\t<li>Gib die Attribute name und gewicht für beide Objekte aus.</li>\n\t\t<li>Zusätzlich: Überlege dir, welche besonderen Eigenschaften oder Verhaltensweisen du für andere Tiere\n\t\t\thinzufügen könntest, und implementiere diese als neue Klassen.</li>\n\t</ul>\n",
            "java": "// Basis-Klasse Tier\nclass Tier {\n    todo ...\n}\n\n// Spezialisierte Klasse Hund, erbt von Tier\nclass Hund extends Tier {\n    todo ...\n}\n\n// Spezialisierte Klasse Katze, erbt von Tier\nclass Katze extends Tier {\n\n    // Konstruktor\n    public Katze(String name, double gewicht) {\n        super(name, gewicht);\n    }\n\n    todo ...\n\n}\n\n// Main-Klasse zum Testen\npublic class Main {\n    public static void main(String[] args) {\n        todo ...\n    }\n}\n"
        },
        {
            "chapter_nr": 25,
            "topic": "method overriding and polymorphism",
            "content": "<h1 class=\"western\">Kapitel 25 - Methodenüberschreibung und Polymorphismus</h1>\n<p>In der objektorientierten Programmierung ist es oft notwendig, dass eine abgeleitete Klasse die Implementierung einer Methode der Basisklasse anpasst oder ersetzt. Dies nennt man <b>Methodenüberschreibung</b>.</p>\n<p>Wenn eine Methode in einer abgeleiteten Klasse die gleiche Signatur wie eine Methode in der Basisklasse hat, wird die Methode der Basisklasse überschrieben. Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Tier {\n    void geraeuschMachen() {\n        System.out.println(\"Das Tier macht ein Geräusch.\");\n    }\n}\n\nclass Hund extends Tier {\n    @Override\n    void geraeuschMachen() {\n        System.out.println(\"Hund bellt: Wuff, Wuff!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Tier meinTier = new Hund();\n        meinTier.geraeuschMachen(); // Gibt \"Hund bellt: Wuff, Wuff!\" aus\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir eine Methode <code>geraeuschMachen</code> in der Klasse <code>Tier</code> definiert und sie in der Klasse <code>Hund</code> überschrieben. Wenn wir die Methode aufrufen, wird die Implementierung der abgeleiteten Klasse verwendet.</p>\n<p>Polymorphismus ist ein weiteres wichtiges Konzept in der OOP. Es ermöglicht, dass ein Objekt einer abgeleiteten Klasse als Objekt der Basisklasse behandelt wird. Dies ist nützlich, wenn du mit einer Sammlung von Objekten arbeitest, die von einer gemeinsamen Basisklasse abgeleitet sind.</p>\n<p>In diesem Kapitel wirst du lernen, wie man Methodenüberschreibung und Polymorphismus in deinen Programmen anwendet, um flexibler und wiederverwendbarer Code zu schreiben.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Basisklasse <code>Fahrzeug</code> mit einer Methode <code>fahren</code>, die eine allgemeine Nachricht ausgibt. Erstelle dann zwei abgeleitete Klassen <code>Auto</code> und <code>Motorrad</code>, die die Methode <code>fahren</code> überschreiben und spezifische Nachrichten ausgeben. Erstelle in der <code>main</code> Methode ein Objekt jeder Klasse und rufe die <code>fahren</code> Methode auf.</p>\n",
            "java": "class Fahrzeug {\n    void fahren() {\n        System.out.println(\"Das Fahrzeug fährt.\");\n    }\n}\n\nclass Auto extends Fahrzeug {\n    @Override\n    void fahren() {\n        System.out.println(\"Das Auto fährt schnell.\");\n    }\n}\n\nclass Motorrad extends Fahrzeug {\n    @Override\n    void fahren() {\n        System.out.println(\"Das Motorrad fährt schnell.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt von Auto und Motorrad und rufe die fahren Methode auf\n    }\n}"
        },
        {
            "chapter_nr": 26,
            "topic": "the super keyword",
            "content": "<h1 class=\"western\">Kapitel 26 - Das super Schlüsselwort</h1>\n<p>In der objektorientierten Programmierung ist das <b>super</b> Schlüsselwort ein wichtiges Konzept, das es dir ermöglicht, auf die Eigenschaften und Methoden der übergeordneten Klasse (Elternklasse) zuzugreifen. Dies ist besonders nützlich, wenn du eine Methode oder ein Attribut in der abgeleiteten Klasse überschreibst und dennoch auf die ursprüngliche Implementierung in der Elternklasse zugreifen möchtest.</p>\n<p>Hier ist ein einfaches Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Tier {\n    void geraeuschMachen() {\n        System.out.println(\"Das Tier macht ein Geräusch.\");\n    }\n}\n\nclass Hund extends Tier {\n    @Override\n    void geraeuschMachen() {\n        super.geraeuschMachen(); // Aufruf der Methode der Elternklasse\n        System.out.println(\"Hund bellt: Wuff, Wuff!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Hund meinHund = new Hund();\n        meinHund.geraeuschMachen(); // Gibt beide Nachrichten aus\n    }\n}</code></pre>\n<p>In diesem Beispiel haben wir die Methode <code>geraeuschMachen</code> in der Klasse <code>Hund</code> überschrieben. Mit <code>super.geraeuschMachen()</code> rufen wir die Methode der Elternklasse auf, bevor wir die spezifische Nachricht für den Hund ausgeben.</p>\n<p>Das <b>super</b> Schlüsselwort kann auch verwendet werden, um auf Konstruktoren der Elternklasse zuzugreifen. Hier ist ein Beispiel:</p>\n<pre class=\"western\"><code class=\"western\">class Tier {\n    String name;\n\n    public Tier(String name) {\n        this.name = name;\n    }\n}\n\nclass Hund extends Tier {\n    public Hund(String name) {\n        super(name); // Aufruf des Konstruktors der Elternklasse\n    }\n}\n}</code></pre>\n<p>In diesem Kapitel wirst du lernen, wie man das <b>super</b> Schlüsselwort verwendet, um die Funktionalität deiner Klassen zu erweitern und den Code klarer und wartbarer zu gestalten.</p>\n<br>",
            "assignment": "<h2>Aufgabe</h2>\n<p>Erstelle eine Klasse <code>Fahrzeug</code> mit einem Attribut <code>geschwindigkeit</code> und einer Methode <code>fahren</code>, die die Geschwindigkeit ausgibt. Erstelle dann eine Klasse <code>Auto</code>, die von <code>Fahrzeug</code> erbt und einen Konstruktor hat, der die Geschwindigkeit über das <code>super</code> Schlüsselwort initialisiert. Rufe die Methode <code>fahren</code> in der <code>main</code> Methode auf.</p>\n",
            "java": "class Fahrzeug {\n    int geschwindigkeit;\n\n    public Fahrzeug(int geschwindigkeit) {\n        this.geschwindigkeit = geschwindigkeit;\n    }\n\n    void fahren() {\n        System.out.println(\"Das Fahrzeug fährt mit \" + geschwindigkeit + \" km/h.\");\n    }\n}\n\nclass Auto extends Fahrzeug {\n    public Auto(int geschwindigkeit) {\n        super(geschwindigkeit);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // TODO: Erstelle ein Objekt der Klasse Auto und rufe die fahren Methode auf\n    }\n}"
        }
    ],
    "html_head": "<!DOCTYPE html>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n\t<title>Learn Java - Kapitel 1</title>\n\t<style type=\"text/css\">\n\t\tp { line-height: 100%; margin-bottom: 0.01in; background: transparent; background: transparent; font-family: \"Liberation Serif\"; font-size: 12pt }\n\t\th1 { margin-bottom: 0.08in; background: transparent; background: transparent; page-break-after: avoid }\n\t\th1.western { font-family: \"Liberation Serif\", serif; font-size: 24pt; font-weight: bold }\n\t\th2 { margin-top: 0.14in; margin-bottom: 0.08in; background: transparent; background: transparent; page-break-after: avoid }\n\t\th2.western { font-family: \"Liberation Serif\", serif; font-size: 18pt; font-weight: bold }\n\t\tpre { margin-top: 0.01in; margin-bottom: 0.01in; background: #cccccc; font-size: 12pt; page-break-before: auto; page-break-after: auto }\n\t\tpre.western { margin-top: 0.1in; \"font-family: \"Liberation Mono\", monospace }\n\t\tcode.western { font-family: \"Liberation Mono\", monospace}\n\t\tul, ol { font-family: \"Liberation Serif\"; font-size: 12pt; line-height: 100%; margin-bottom: 0.01in; }\n\t\tli { font-family: \"Liberation Serif\"; font-size: 12pt; line-height: 100%; margin-bottom: 0.01in; }\n\t</style>\n</head>\n<body lang=\"de-DE\">\n",
    "html_tail": "</body>\n</html>\n"
}
